---
import PageLayout from "../layouts/PageLayout.astro";
---

<PageLayout>
  <!-- Heading -->
  <div class="relative text-center mb-12">
    <h2
      class="relative text-4xl md:text-5xl lg:text-6xl font-bold text-white z-10 animate-reveal"
    >
      <span
        class="bg-clip-text text-transparent bg-gradient-to-r from-white to-white"
      >
        Upload a Picture
      </span>
    </h2>
  </div>

  <!-- Upload Form -->
  <div id="addPicContainer" class="max-w-3xl mx-auto p-8 rounded-lg shadow-xl backdrop-blur-sm">
    <form id="uploadForm" class="space-y-6">
      <!-- Image Upload -->
      <div class="space-y-2">
        <label for="image" class="block text-white text-lg font-medium">Image File*</label>
        <div class="flex items-center justify-center w-full">
          <label id="imageUploadBox" for="imageUpload" class="flex flex-col items-center justify-center w-full h-64 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer transition-all">
            <div class="flex flex-col items-center justify-center pt-5 pb-6" id="uploadPlaceholder">
              <svg class="w-10 h-10 mb-3 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
              </svg>
              <p class="mb-2 text-sm text-gray-400"><span class="font-semibold">Click to upload</span> or drag and drop</p>
              <p class="text-xs text-gray-400">PNG, JPG or WEBP (Max 10MB)</p>
            </div>
            <div id="imagePreviewContainer" class="hidden w-full h-full relative">
              <img id="imagePreview" class="w-full h-full object-contain" />
              <button type="button" id="removeImage" class="absolute top-2 right-2 bg-red-600 rounded-full p-1 text-white">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
            <input id="imageUpload" type="file" class="hidden" accept="image/png, image/jpeg, image/webp" required />
          </label>
        </div>
      </div>

      <!-- Blog Title -->
      <div>
        <label for="title" class="block text-white text-lg font-medium">Title*</label>
        <input type="text" id="title" name="title" required class="mt-1 block w-full px-3 py-2 rounded-md shadow-sm focus:outline-none focus:ring-accent focus:border-accent" />
      </div>

      <!-- Short Description -->
      <div>
        <label for="shortDescription" class="block text-white text-lg font-medium">Short Description*</label>
        <input type="text" id="shortDescription" name="shortDescription" required class="mt-1 block w-full px-3 py-2 rounded-md shadow-sm focus:outline-none focus:ring-accent focus:border-accent" />
      </div>

      <!-- Full Description (optional) -->
      <div>
        <label for="description" class="block text-white text-lg font-medium">Full Description (optional)</label>
        <textarea id="description" name="description" rows="3" class="mt-1 block w-full px-3 py-2 rounded-md shadow-sm focus:outline-none focus:ring-accent focus:border-accent"></textarea>
      </div>

      <!-- Categories -->
      <div>
        <label class="block text-white text-lg font-medium">Categories/Tags (optional)</label>
        <div class="flex">
          <input type="text" id="categoryInput" class="mt-1 flex-grow px-3 py-2 rounded-l-md shadow-sm focus:outline-none focus:ring-accent focus:border-accent" />
          <button type="button" id="addCategory" class="mt-1 px-4 py-2 bg-accent text-black rounded-r-md hover:bg-accent-dark transition-colors">Add</button>
        </div>
        <div id="categoriesContainer" class="flex flex-wrap gap-2 mt-2"></div>
      </div>

      <!-- Markdown Editor -->
      <div>
        <label for="content" class="block text-white text-lg font-medium">Blog Content (Markdown)*</label>
        <div class="mt-1">
          <textarea id="markdownEditor" name="content" rows="10" class="block w-full px-3 py-2rounded-md shadow-sm focus:outline-none focus:ring-accent focus:border-accent"></textarea>
        </div>
      </div>

      <!-- Submit Button -->
      <div class="pt-5">
        <button type="submit" id="submitButton" class="w-full py-3 px-4 bg-accent text-black font-bold rounded-md hover:bg-accent-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-accent transition-all">
          Upload Picture & Save Blog
        </button>
      </div>
    </form>
  </div>
</PageLayout>

<script>
  // Initialize markdown editor
  import EasyMDE from 'easymde';
  import 'easymde/dist/easymde.min.css';

  document.addEventListener('DOMContentLoaded', () => {
    // Initialize markdown editor
    const easyMDE = new EasyMDE({
      element: document.getElementById('markdownEditor'),
      spellChecker: false,
      autofocus: false,
      toolbar: ['bold', 'italic', 'heading', '|', 'quote', 'unordered-list', 'ordered-list', '|', 'link', 'image', '|', 'preview'],
    });

    // Image preview functionality
    const imageUpload = document.getElementById('imageUpload');
    const imagePreview = document.getElementById('imagePreview');
    const imagePreviewContainer = document.getElementById('imagePreviewContainer');
    const uploadPlaceholder = document.getElementById('uploadPlaceholder');
    const removeImageBtn = document.getElementById('removeImage');

    imageUpload.addEventListener('change', (e) => {
      const file = e.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = (e) => {
          imagePreview.src = e.target.result;
          uploadPlaceholder.classList.add('hidden');
          imagePreviewContainer.classList.remove('hidden');
        };
        reader.readAsDataURL(file);
      }
    });

    removeImageBtn.addEventListener('click', () => {
      imageUpload.value = '';
      imagePreviewContainer.classList.add('hidden');
      uploadPlaceholder.classList.remove('hidden');
    });

    // Categories/tags functionality
    const categoryInput = document.getElementById('categoryInput');
    const addCategoryBtn = document.getElementById('addCategory');
    const categoriesContainer = document.getElementById('categoriesContainer');
    const categories = new Set();

    function addCategory(category) {
      if (category && !categories.has(category)) {
        categories.add(category);
        renderCategories();
        categoryInput.value = '';
      }
    }

    function removeCategory(category) {
      categories.delete(category);
      renderCategories();
    }

    function renderCategories() {
      categoriesContainer.innerHTML = '';
      categories.forEach(category => {
        const categoryEl = document.createElement('div');
        categoryEl.className = 'tag px-3 py-1 rounded-full flex items-center space-x-1';
        categoryEl.innerHTML = `
          <span class="text-white">${category}</span>
          <button type="button" class="text-gray-300 hover:text-white">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        `;
        categoryEl.querySelector('button').addEventListener('click', () => removeCategory(category));
        categoriesContainer.appendChild(categoryEl);
      });
    }

    addCategoryBtn.addEventListener('click', () => addCategory(categoryInput.value.trim()));
    categoryInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        e.preventDefault();
        addCategory(categoryInput.value.trim());
      }
    });

    // Form submission
    const form = document.getElementById('uploadForm');
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData();
      
      // Add file
      const fileInput = document.getElementById('imageUpload');
      if (fileInput.files.length > 0) {
        formData.append('image', fileInput.files[0]);
      }
      
      // Add text fields
      formData.append('title', document.getElementById('title').value);
      formData.append('shortDescription', document.getElementById('shortDescription').value);
      formData.append('description', document.getElementById('description').value);
      formData.append('content', easyMDE.value());
      
      // Add categories as JSON
      formData.append('categories', JSON.stringify(Array.from(categories)));
      
      try {
        const submitButton = document.getElementById('submitButton');
        submitButton.disabled = true;
        submitButton.textContent = 'Uploading...';
        
        const response = await fetch('/api/upload-picture', {
          method: 'POST',
          body: formData
        });
        
        if (response.ok) {
          const result = await response.json();
          alert('Successfully uploaded!');
          window.location.href = `/blog/${result.slug}`; // Redirect to the new blog post
        } else {
          const error = await response.json();
          alert(`Error: ${error.message || 'Something went wrong'}`);
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Failed to upload. Please try again.');
      } finally {
        submitButton.disabled = false;
        submitButton.textContent = 'Upload Picture & Save Blog';
      }
    });
  });
</script>

<style>
  /* Fix EasyMDE styling to match dark theme */
  :global(.EasyMDEContainer) {
    color: #d1d5db;
  }
  :global(.EasyMDEContainer .CodeMirror) {
    background-color: rgba(255,255,255,0.1);
    color: #f3f4f6;
    border-color: #4b5563;
  }
  :global(.EasyMDEContainer .editor-toolbar) {
    background-color: rgba(255,255,255,0.1);;
    border-color: #4b5563;
  }
  :global(.EasyMDEContainer .editor-toolbar button) {
    color: #d1d5db !important;
  }
  :global(.EasyMDEContainer .editor-toolbar button:hover) {
    background-color: rgba(255,255,255,0.1);;
  }
  :global(.EasyMDEContainer .editor-preview) {
    background-color: #1f2937;
    color: #f3f4f6;
  }
</style>